/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace BudgetDapp {
  export type BudgetItemsStruct = {
    ID: PromiseOrValue<BigNumberish>;
    maticAmount: PromiseOrValue<BigNumberish>;
    item: PromiseOrValue<string>;
    created: PromiseOrValue<boolean>;
  };

  export type BudgetItemsStructOutput = [
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & { ID: BigNumber; maticAmount: BigNumber; item: string; created: boolean };
}

export interface BudgetDappInterface extends utils.Interface {
  functions: {
    "Budgets(uint256)": FunctionFragment;
    "balance()": FunctionFragment;
    "budgetCount()": FunctionFragment;
    "createBudget(string,uint256)": FunctionFragment;
    "depositBudgetFund(uint256)": FunctionFragment;
    "initialBudgetFunds()": FunctionFragment;
    "listItem(uint256)": FunctionFragment;
    "maticContractAddress()": FunctionFragment;
    "myList()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeItems(uint256)": FunctionFragment;
    "unlockTime()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Budgets"
      | "balance"
      | "budgetCount"
      | "createBudget"
      | "depositBudgetFund"
      | "initialBudgetFunds"
      | "listItem"
      | "maticContractAddress"
      | "myList"
      | "owner"
      | "removeItems"
      | "unlockTime"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Budgets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "budgetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createBudget",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBudgetFund",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialBudgetFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maticContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "myList", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeItems",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Budgets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "budgetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBudgetFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialBudgetFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maticContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "myList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BudgetCreated(uint256,uint256,string,bool)": EventFragment;
    "ItemRemoved(uint256)": EventFragment;
    "Withdrawal(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BudgetCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface BudgetCreatedEventObject {
  ID: BigNumber;
  amount: BigNumber;
  content: string;
  created: boolean;
}
export type BudgetCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, boolean],
  BudgetCreatedEventObject
>;

export type BudgetCreatedEventFilter = TypedEventFilter<BudgetCreatedEvent>;

export interface ItemRemovedEventObject {
  ID: BigNumber;
}
export type ItemRemovedEvent = TypedEvent<[BigNumber], ItemRemovedEventObject>;

export type ItemRemovedEventFilter = TypedEventFilter<ItemRemovedEvent>;

export interface WithdrawalEventObject {
  amount: BigNumber;
  when: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [BigNumber, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface BudgetDapp extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BudgetDappInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Budgets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        ID: BigNumber;
        maticAmount: BigNumber;
        item: string;
        created: boolean;
      }
    >;

    balance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { contractBalance: BigNumber }>;

    budgetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    createBudget(
      _item: PromiseOrValue<string>,
      _maticAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositBudgetFund(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialBudgetFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    listItem(
      _ID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BudgetDapp.BudgetItemsStructOutput] & {
        value: BudgetDapp.BudgetItemsStructOutput;
      }
    >;

    maticContractAddress(overrides?: CallOverrides): Promise<[string]>;

    myList(
      overrides?: CallOverrides
    ): Promise<[BudgetDapp.BudgetItemsStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeItems(
      _ID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  Budgets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, boolean] & {
      ID: BigNumber;
      maticAmount: BigNumber;
      item: string;
      created: boolean;
    }
  >;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  budgetCount(overrides?: CallOverrides): Promise<BigNumber>;

  createBudget(
    _item: PromiseOrValue<string>,
    _maticAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositBudgetFund(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialBudgetFunds(overrides?: CallOverrides): Promise<BigNumber>;

  listItem(
    _ID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BudgetDapp.BudgetItemsStructOutput>;

  maticContractAddress(overrides?: CallOverrides): Promise<string>;

  myList(
    overrides?: CallOverrides
  ): Promise<BudgetDapp.BudgetItemsStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeItems(
    _ID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Budgets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        ID: BigNumber;
        maticAmount: BigNumber;
        item: string;
        created: boolean;
      }
    >;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    budgetCount(overrides?: CallOverrides): Promise<BigNumber>;

    createBudget(
      _item: PromiseOrValue<string>,
      _maticAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositBudgetFund(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialBudgetFunds(overrides?: CallOverrides): Promise<BigNumber>;

    listItem(
      _ID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BudgetDapp.BudgetItemsStructOutput>;

    maticContractAddress(overrides?: CallOverrides): Promise<string>;

    myList(
      overrides?: CallOverrides
    ): Promise<BudgetDapp.BudgetItemsStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeItems(
      _ID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BudgetCreated(uint256,uint256,string,bool)"(
      ID?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      content?: PromiseOrValue<string> | null,
      created?: null
    ): BudgetCreatedEventFilter;
    BudgetCreated(
      ID?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      content?: PromiseOrValue<string> | null,
      created?: null
    ): BudgetCreatedEventFilter;

    "ItemRemoved(uint256)"(
      ID?: PromiseOrValue<BigNumberish> | null
    ): ItemRemovedEventFilter;
    ItemRemoved(
      ID?: PromiseOrValue<BigNumberish> | null
    ): ItemRemovedEventFilter;

    "Withdrawal(uint256,uint256)"(
      amount?: null,
      when?: null
    ): WithdrawalEventFilter;
    Withdrawal(amount?: null, when?: null): WithdrawalEventFilter;
  };

  estimateGas: {
    Budgets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    budgetCount(overrides?: CallOverrides): Promise<BigNumber>;

    createBudget(
      _item: PromiseOrValue<string>,
      _maticAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositBudgetFund(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialBudgetFunds(overrides?: CallOverrides): Promise<BigNumber>;

    listItem(
      _ID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maticContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    myList(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeItems(
      _ID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Budgets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    budgetCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createBudget(
      _item: PromiseOrValue<string>,
      _maticAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositBudgetFund(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialBudgetFunds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listItem(
      _ID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maticContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeItems(
      _ID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
